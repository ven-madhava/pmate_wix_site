// For full API documentation, including code examples, visit http://wix.to/94BuAAs

// imports
// -------
import { getprogress, getrangepdf, getrangepdfurl, gettaskstatus, getallpatternsurl, getallstylingsurl, savewiximagetogcs, createnewpatterns, prepareconfirmedstylings, createtexturesforselection, generateideasforuser } from 'backend/aModule';
import { dep_values, cat_values_girls, cat_values_boys, cat_values_women, cat_values_men, threshold_styling_select, max_themes_upload, min_themes_upload, main_base_url, threshold_pattern_select } from 'public/public_initials.js';
import wixUsers from 'wix-users';
import wixLocation from 'wix-location';
import wixWindow from 'wix-window';
import {session} from 'wix-storage';
import {local} from 'wix-storage';


// Declarations for the page
// -------------------------
var selected_stylings_main = [];
var uploadcounter = 0;
var main_task_id;
var main_user_id;
var main_gen_id;
var thumbnail_local_urls = [];
var to_be_uploaded_local_urls = [];
var selected_patterns_main = [];
var progresstimerid;
var gentimerid;
var patternsselectedcounter = 0;

// Variables needed for reporting
// ------------------------------
var userdevice;
var pmate_userid;
var pmate_sessionid;
var pmate_startsession;
var pmate_usertype;

// Variables for pagination
// -------------------------
var total_options;
var no_pages;
var fixed_display = 50;
var start_ind;
var end_ind;

// Global items page
// -----------------
var global_swatch_items = [];
var global_styling_items = [];

// 0.-3 Function that sets repeater data after pagintion change
// ------------------------------------------------------------

// 0.-2 Function that sets pagination bar
// --------------------------------------
function setpagination(total_items, $item){

	// No pages
	// --------
	no_pages = Math.floor(total_items/fixed_display);

	// If there is a remiander
	// ----------------------
	if ((total_items % fixed_display) > 0){
		no_pages += 1;
	}

	$item.totalPages = no_pages;
	$item.currentPage = 1;
	$item.expand();
	$item.enable();

	// Setting start_ind and end_in
	// ----------------------------
	start_ind = 0;
	if (start_ind + fixed_display < total_items){
		end_ind = start_ind + fixed_display;
	} else {
		end_ind = total_items;
	}
	
}

// 0.-1 Function to provide current timestamp as string
// ---------------------------------------------------
export function providetimestamp(){

	var t_date_p = new Date();
	var t_time_p = t_date_p.getTime();
	return String(t_time_p);

}

// 0.0 Function to provide current timestamp as string
// ---------------------------------------------------
export function timeelapsed(session_id) {

	// Getting timestamp and Converting to integer
	// -------------------------------------------
	var sess_timestamp = parseInt(session_id.replace("pmatesession_",""), 10); // in millisecs
	var curr_timestamp = parseInt(providetimestamp(), 10); // millisecs
	var diff_secs = (curr_timestamp - sess_timestamp)/1000;
	return String(Math.round(diff_secs));

}

// 0.0 Function to set user device, session and local variables
// ------------------------------------------------------------
export function setusersessiondevice(){

	// 1. Getting userdevice
	// ----------------------
	userdevice = wixWindow.formFactor;

	// 2. Setting local & session data
	// --------------------------------
	pmate_userid = local.getItem("pmate_user_id"); 
	pmate_sessionid = session.getItem("pmate_session_id");

	// 2.1 local data
	// --------------
	if (String(pmate_userid).toLowerCase().includes("null")){

		// New user. need to set local
		// ---------------------------
		console.log("New user..")
		pmate_usertype = "new_user";
		pmate_userid = "pmateuser_" + String(providetimestamp());
		local.setItem("pmate_user_id", pmate_userid);
		
	} else {

		pmate_usertype = "returning_user";
	}

	// 2.2 session data
	// ----------------
	if (String(pmate_sessionid).toLowerCase().includes("null")){

		// New session. need to set session
		// ---------------------------------
		console.log("New session..")
		pmate_sessionid = "pmatesession_" + String(providetimestamp());
		session.setItem("pmate_session_id", pmate_sessionid);
	

	}

	console.log('Finished setting reporting params..');
	console.log(userdevice);
	console.log(pmate_userid);
	console.log(pmate_sessionid);
	
	
}


// 0.1 Function to convert array to comma string for API
// -----------------------------------------------------
export function getcorrectstring(in_array) {

	var out_string = "";

	for (var i in in_array) {
		out_string += String(in_array[i]) + ",";
	}

	out_string = out_string.substring(0, out_string.length - 1);

	return out_string
}

// 0.2 Funcion that sets display
// ----------------------------
export async function setdisplay(status_newpats, status_prepstyles, status_createtextures){


	// Display setting code
	// --------------------
	if (status_newpats >= 1 && status_prepstyles === 0 && status_createtextures === 0) {

		// Ladnding the user at pick stylings
		// ---------------------------------

		// Display settings ----------------------------------------------------

		// 0. Progress box display settings
		// --------------------------------
		$w('#newrangeprogressbox').expand();
		$w('#prog1button').enable();
		$w('#prog2button').disable();
		$w('#prog3button').disable();
		$w('#prog1linegreen').show();
		$w('#prog2linegreen').hide();
		$w('#prog1linegrey').hide();
		$w('#prog2linegrey').show();

		// 1. Upload theme box display settings
		// ------------------------------------
		$w('#uploadcreatetaskbox').collapse();
		$w('#thumbnailrepeater').collapse();
		$w('#thumbnailrepeater').data = [];
		$w('#uploadfiletext').text = "";
		$w('#pickstylingsbutton').disable();
		$w('#newpatternserrorlabel').text = "";

		// 2. Pick styling box display settings
		// ------------------------------------
		$w('#choosestylingsbox').expand();
		$w('#stylingrepeater').collapse();
		$w('#catdropdown').disable();
		$w('#uploadstylingsbutton').collapse();
		$w('#stylingscounterlabel').text = "";

		// 3. Pick patterns box display settings
		// --------------------------------------
		$w('#pickpatternsbox').collapse();
		$w('#pickedpatternscounterlabel').text = "";
		$w('#allpatternsrepeater').collapse();
		$w('#allpatternsrepeater').data = [];
		$w('#createtexturesbutton').disable();

		// more to come here as we add..

		// 4. AI initialised box display settings
		// --------------------------------------
		$w('#aiinitialisedbox').collapse();
		$w('#aiinitialisedheader').text = "";
		$w('#aiinitialisedpara').text = "";

		// 5. Generate ideas box
		// ---------------------
		$w('#generateideasbox').collapse();
		// more to come

		// 6. Collapsing loading wait box
		// ----------------------------
		$w('#loadingwaitbox').collapse();

		// END OF DISPLAY SETTINGS -----------------------------------------------

	} else if (status_newpats === 1 && status_prepstyles >= 1 && status_createtextures === 0) {

		// Ladnding the user at AI initialised since patterns build is still underway and user finished styling picking
		// ------------------------------------------------------------------------------------------------------------

		// Display settings ----------------------------------------------------

		// 0. Progress box display settings
		// --------------------------------
		$w('#newrangeprogressbox').expand();
		$w('#prog1button').enable();
		$w('#prog2button').enable();
		$w('#prog3button').disable();
		$w('#prog1linegreen').show();
		$w('#prog2linegreen').hide();
		$w('#prog1linegrey').hide();
		$w('#prog2linegrey').show();

		// 1. Upload theme box display settings
		// ------------------------------------
		$w('#uploadcreatetaskbox').collapse();
		$w('#thumbnailrepeater').collapse();
		$w('#thumbnailrepeater').data = [];
		$w('#uploadfiletext').text = "";
		$w('#pickstylingsbutton').disable();
		$w('#newpatternserrorlabel').text = "";

		// 2. Pick styling box display settings
		// ------------------------------------
		$w('#choosestylingsbox').collapse();
		$w('#stylingrepeater').collapse();
		$w('#catdropdown').disable();
		$w('#uploadstylingsbutton').collapse();
		$w('#stylingscounterlabel').text = "";

		// 3. Pick patterns box display settings
		// --------------------------------------
		$w('#pickpatternsbox').collapse();
		$w('#pickedpatternscounterlabel').text = "";
		$w('#allpatternsrepeater').collapse();
		$w('#allpatternsrepeater').data = [];
		$w('#createtexturesbutton').disable();

		// 4. AI initialised box display settings
		// --------------------------------------
		$w('#aiinitialisedbox').expand();
		$w('#aiinitialisedheader').text = "AI Initialised"
		$w('#aiinitialisedpara').text = "We have initialised our AI and training it based on your inputs. This may takeÂ a few minutes.";

		
		// Calling progress function
		// -------------------------
		progresstimerid = setInterval(getprogressupdate, 2000, main_user_id, main_task_id);
		

		// 5. Generate ideas box
		// ---------------------
		$w('#generateideasbox').collapse();
		// more to come

		// 6. Collapsing loading wait box
		// ----------------------------
		$w('#loadingwaitbox').collapse();

		// 7. Loading feedback lightbox
		// ----------------------------
		setTimeout(()=>{wixWindow.openLightbox("feedbacklightbox");},6000);
		

		// END OF DISPLAY SETTINGS -----------------------------------------------

	} else if (status_newpats > 1 && status_prepstyles >= 1 && status_createtextures === 0) {

		// Ladnding the user at pick patterns on continuos flow
		// ----------------------------------------------------

		// Display settings ----------------------------------------------------

		// 0. Progress box display settings
		// --------------------------------
		$w('#newrangeprogressbox').expand();
		$w('#prog1button').enable();
		$w('#prog2button').enable();
		$w('#prog3button').disable();
		$w('#prog1linegreen').show();
		$w('#prog2linegreen').show();
		$w('#prog1linegrey').hide();
		$w('#prog2linegrey').hide();

		// 1. Upload theme box display settings
		// ------------------------------------
		$w('#uploadcreatetaskbox').collapse();
		$w('#thumbnailrepeater').collapse();
		$w('#thumbnailrepeater').data = [];
		$w('#uploadfiletext').text = "";
		$w('#pickstylingsbutton').disable();
		$w('#newpatternserrorlabel').text = "";

		// 2. Pick styling box display settings
		// ------------------------------------
		$w('#choosestylingsbox').collapse();
		$w('#stylingrepeater').collapse();
		$w('#catdropdown').disable();
		$w('#uploadstylingsbutton').collapse();
		$w('#stylingscounterlabel').text = "";

		// 3. Pick patterns box display settings
		// --------------------------------------
		$w('#pickpatternsbox').expand();
		$w('#pickedpatternscounterlabel').text = "";
		$w('#allpatternsrepeater').collapse();
		$w('#allpatternsrepeater').data = [];
		load_all_patterns(main_user_id, main_task_id);

		// 4. AI initialised box display settings
		// --------------------------------------
		$w('#aiinitialisedbox').collapse();
		$w('#aiinitialisedheader').text = "";
		$w('#aiinitialisedpara').text = "";

		// 5. Generate ideas box
		// ---------------------
		$w('#generateideasbox').collapse();
		// more to come

		// 6. Collapsing loading wait box
		// ----------------------------
		$w('#loadingwaitbox').collapse();

		// END OF DISPLAY SETTINGS -----------------------------------------------

	} else if (status_newpats > 1 && status_prepstyles >= 1 && status_createtextures === 1) {

		// ALL done from user input display
		// Display settings ----------------------------------------------------

		// 0. Progress box display settings
		// --------------------------------
		$w('#newrangeprogressbox').expand();
		$w('#prog1button').enable();
		$w('#prog2button').enable();
		$w('#prog3button').enable();
		$w('#prog1linegreen').show();
		$w('#prog2linegreen').show();
		$w('#prog1linegrey').hide();
		$w('#prog2linegrey').hide();

		// 1. Upload theme box display settings
		// ------------------------------------
		$w('#uploadcreatetaskbox').collapse();
		$w('#thumbnailrepeater').collapse();
		$w('#thumbnailrepeater').data = [];
		$w('#uploadfiletext').text = "";
		$w('#pickstylingsbutton').disable();
		$w('#newpatternserrorlabel').text = "";

		// 2. Pick styling box display settings
		// ------------------------------------
		$w('#choosestylingsbox').collapse();
		$w('#stylingrepeater').collapse();
		$w('#catdropdown').disable();
		$w('#uploadstylingsbutton').collapse();
		$w('#stylingscounterlabel').text = "";

		// 3. Pick patterns box display settings
		// --------------------------------------
		$w('#pickpatternsbox').collapse();
		$w('#pickedpatternscounterlabel').text = "";
		$w('#allpatternsrepeater').collapse();
		$w('#allpatternsrepeater').data = [];
		$w('#createtexturesbutton').disable();

		// 4. AI initialised box display settings
		// --------------------------------------
		$w('#aiinitialisedbox').expand();
		$w('#aiinitialisedheader').text = "All Done! Hang in there while our AI completes"
		$w('#aiinitialisedpara').text = "Your side of inputs is now done. AI training will complete in a few minutes.";
		// Calling progress function
		// -------------------------
		progresstimerid = setInterval(getprogressupdate, 2000, main_user_id, main_task_id);

		
		// 5. Generate ideas box
		// ---------------------
		$w('#generateideasbox').collapse();
		// more to come

		// 6. Collapsing loading wait box
		// ----------------------------
		$w('#loadingwaitbox').collapse();

		// 7. Loading feedback lightbox
		// ----------------------------
		setTimeout(()=>{wixWindow.openLightbox("feedbacklightbox");},6000);
		

		// END OF DISPLAY SETTINGS -----------------------------------------------

	} else if (status_newpats > 1 && status_prepstyles > 1 && status_createtextures > 1) {

		// Generate ideas display
		// ----------------------
		// Display settings ----------------------------------------------------

		// 0. Progress box display settings
		// --------------------------------
		$w('#newrangeprogressbox').collapse();
		$w('#prog1button').enable();
		$w('#prog2button').enable();
		$w('#prog3button').enable();
		$w('#prog1linegreen').show();
		$w('#prog2linegreen').show();
		$w('#prog1linegrey').hide();
		$w('#prog2linegrey').hide();

		// 1. Upload theme box display settings
		// ------------------------------------
		$w('#uploadcreatetaskbox').collapse();
		$w('#thumbnailrepeater').collapse();
		$w('#thumbnailrepeater').data = [];
		$w('#uploadfiletext').text = "";
		$w('#pickstylingsbutton').disable();
		$w('#newpatternserrorlabel').text = "";

		// 2. Pick styling box display settings
		// ------------------------------------
		$w('#choosestylingsbox').collapse();
		$w('#stylingrepeater').collapse();
		$w('#catdropdown').disable();
		$w('#uploadstylingsbutton').collapse();
		$w('#stylingscounterlabel').text = "";

		// 3. Pick patterns box display settings
		// --------------------------------------
		$w('#pickpatternsbox').collapse();
		$w('#pickedpatternscounterlabel').text = "";
		$w('#allpatternsrepeater').collapse();
		$w('#allpatternsrepeater').data = [];
		$w('#createtexturesbutton').disable();

		// more to come here as we add..

		// 4. AI initialised box display settings
		// --------------------------------------
		$w('#aiinitialisedbox').collapse();
		$w('#aiinitialisedheader').text = "";
		$w('#aiinitialisedpara').text = "";

		// 5. Generate ideas box
		// ---------------------
		$w('#generateideasbox').expand();
		$w('#generateideasbutton').disable()
		// more to come

		// 6. Collapsing loading wait box
		// ----------------------------
		$w('#loadingwaitbox').collapse();

		// 7. Loading feedback lightbox
		// ----------------------------
		setTimeout(()=>{wixWindow.openLightbox("feedbacklightbox");},10000);
		

		// END OF DISPLAY SETTINGS -----------------------------------------------


	} else if (status_newpats < 0 && status_prepstyles < 0 && status_createtextures < 0) {

		// Setting MAIN TASK ID here
		// -------------------------
		var t_date = new Date();
		var t_time = t_date.getTime();
		main_task_id = "PMTASK" + String(t_time);

		// Display settings ----------------------------------------------------

		// 0. Progress box display settings
		// --------------------------------
		$w('#newrangeprogressbox').expand();
		$w('#prog1button').enable();
		$w('#prog2button').disable();
		$w('#prog3button').disable();
		$w('#prog1linegreen').hide();
		$w('#prog2linegreen').hide();
		$w('#prog1linegrey').show();
		$w('#prog2linegrey').show();

		// 1. Upload theme box display settings
		// ------------------------------------
		$w('#uploadcreatetaskbox').expand();
		$w('#thumbnailrepeater').collapse();
		$w('#thumbnailrepeater').data = [];
		$w('#uploadfiletext').text = "";
		$w('#pickstylingsbutton').disable();
		$w('#newpatternserrorlabel').text = "";

		// 2. Pick styling box display settings
		// ------------------------------------
		$w('#choosestylingsbox').collapse();
		$w('#stylingrepeater').collapse();
		$w('#catdropdown').disable();
		$w('#uploadstylingsbutton').collapse();
		$w('#stylingscounterlabel').text = "";

		// 3. Pick patterns box display settings
		// --------------------------------------
		$w('#pickpatternsbox').collapse();
		$w('#pickedpatternscounterlabel').text = "";
		$w('#allpatternsrepeater').collapse();
		$w('#allpatternsrepeater').data = [];
		$w('#createtexturesbutton').disable();

		// 4. AI initialised box display settings
		// --------------------------------------
		$w('#aiinitialisedbox').collapse();
		$w('#aiinitialisedheader').text = "";
		$w('#aiinitialisedpara').text = "";

		// 5. Generate ideas box
		// ---------------------
		$w('#generateideasbox').collapse();
		// more to come

		// 6. Collapsing loading wait box
		// ----------------------------
		$w('#loadingwaitbox').collapse();

		// END OF DISPLAY SETTINGS -----------------------------------------------

	}

	 else {

		// Page loaded for user id but with invalid TASK ID - reloading page
		// -----------------------------------------------------------------
		let baseUrl = wixLocation.baseUrl;
		await wixLocation.to(main_base_url + "/build-range")

	}

}

// 0.3 Function that sets dropdown menu & other initial settings
// -------------------------------------------------------------
$w.onReady(async function () {

	

	// Setting display to loading
	// --------------------------
	$w('#loadingwaitbox').expand();

	// Setting user data
	// -----------------
	setusersessiondevice();

	

	// 1. Get the userid -- this page is always visible only after a user is logged in
	// -------------------------------------------------------------------------------
	wixUsers.currentUser.getEmail()
	.then( function (user) {

			// 1. Setting main user ID
			// -----------------------
			main_user_id = user;

			// 1.1 Getting and setting user device
			// -----------------------------------
			userdevice = wixWindow.formFactor;
			
			// Setting fixed display for options
			// ---------------------------------
			if (userdevice.toLowerCase().includes("mobile")) {

				fixed_display = 24;
			
			}
			

			// 2. Fixed setting displays
			// ------------------------
			$w('#depdropdown').options = dep_values;

			// 3. Master check to see if task_id is in the URL
			// -----------------------------------------------
			let query = wixLocation.query;
			var urltaskid = String(query["task_id"]);

			if (urltaskid.includes("PMTASK") === true) {

				// Setting main task id
				// --------------------
				main_task_id = urltaskid;

				// USE TASK STATUS CODE AND SET DISPLAY ACCORDINGLY
				// ------------------------------------------------
				gettaskstatus(main_user_id, main_task_id)
					.then( function(url_response) {
						
						// Calling setdisplay
						// ------------------
						setdisplay(url_response["new_patterns"], url_response["prepare_stylings"], url_response["create_textures"]);

					});
			}
			else {

				// Code to call 
				// ------------
				setdisplay(-1, -1, -1)

			}
		});
	
	
	// Setting swatchpagination bar change event
	// -----------------------------------------
	$w("#swatchpagination").onChange( (event) => {
  
		// Setting starting and ending indices
		// -----------------------------------
		var curr_page = $w('#swatchpagination').currentPage;

		// Setting starting and ending
		// ---------------------------
		start_ind = (curr_page - 1) * fixed_display;

		// Setting end ind
		// ---------------
		if (start_ind + fixed_display < total_options){
			end_ind = start_ind + fixed_display;
		} else {
			end_ind = total_options;
		}

		// Setting repeater items as well
		// ------------------------------
		$w('#allpatternsrepeater').data = [];
		$w('#allpatternsrepeater').collapse();
		$w('#allpatternsrepeater').data = global_swatch_items.slice(start_ind, end_ind);
		$w('#allpatternsrepeater').expand();
		setTimeout(()=>{$w('#loadingwaitbox').collapse();},2000);

		// Remembering and setting check box value from users selection
		// ------------------------------------------------------------
		$w('#allpatternsrepeater').forEachItem(($item, itemData, index) => {
			var curr_value = $item("#selectpatternchkbox").value;
			var curr_value_index = selected_patterns_main.indexOf(curr_value);
			if (curr_value_index < 0) {
				$item("#selectpatternchkbox").checked = false;
			} else {
				$item("#selectpatternchkbox").checked = true;
			}
		});

		// Setting display text
		// --------------------
		$w('#pickedpatternscounterlabel').text = String(selected_patterns_main.length) + " swatche(s) selected. Showing " + String(start_ind) + " to " + String(end_ind) + " of a total " + String(global_swatch_items.length) + " swatches.";
		

	});

	// Setting stylingpagination bar change event
	// -----------------------------------------
	$w("#stylingpagination").onChange( (event) => {
  
		// Setting starting and ending indices
		// -----------------------------------
		var curr_page = $w('#stylingpagination').currentPage;

		// Setting starting and ending
		// ---------------------------
		start_ind = (curr_page - 1) * fixed_display;

		// Setting end ind
		// ---------------
		if (start_ind + fixed_display < total_options){
			end_ind = start_ind + fixed_display;
		} else {
			end_ind = total_options;
		}

		// Setting repeater items as well
		// ------------------------------
		$w('#stylingrepeater').data = [];
		$w('#stylingrepeater').collapse();
		$w('#stylingrepeater').data = global_styling_items.slice(start_ind, end_ind);
		$w('#stylingrepeater').expand();
		setTimeout(()=>{$w('#loadingwaitbox').collapse();},2000);

		// Remembering and setting check box value from users selection
		// ------------------------------------------------------------
		$w('#stylingrepeater').forEachItem(($item, itemData, index) => {
			var curr_value = $item("#stylingcheckbox").value;
			var curr_value_index = selected_stylings_main.indexOf(curr_value);
			if (curr_value_index < 0) {
				$item("#stylingcheckbox").checked = false;
			} else {
				$item("#stylingcheckbox").checked = true;
			}
		});

		// Setting display text
		// --------------------
		$w('#stylingscounterlabel').text = String(selected_stylings_main.length) + " styling block(s) selected. Showing " + String(start_ind) + " to " + String(end_ind) + " of a total " + String(global_styling_items.length) + " blocks.";
		

	});

});


// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// 1 UPLOAD THEME FUNCTIONS

// 1.1 Function that uploads selected file to Local storage
// --------------------------------------------------------

export async function selectfile_change(event) {

	// Null label text
	// ---------------
	var uploads_left;
	$w('#uploadfiletext').text = '';
	let files = $w("#selectfile").value;

	try {

		// Ensuring there is a files
		// -------------------------
		let sizes = files[0].size;
		
		if ( uploadcounter < max_themes_upload ) {

			// Disabling button while ops running
			// ----------------------------------
			$w('#uploadfiletext').text = "Processing your file..";
			$w('#selectfile').disable();

			// Uploading image to wix storage and getting URL
			// ----------------------------------------------
			let uploadvalue = await $w("#selectfile").startUpload();
			let u_url = uploadvalue.url;

			// Appending local URL to be uploaded to GCS later
			// -----------------------------------------------
			to_be_uploaded_local_urls.push(u_url)

			// Enabling buttons back
			// ---------------------
			$w('#selectfile').enable();

			// Resetting thumbnail repeater
			// ----------------------------	
			$w('#thumbnailrepeater').collapse();
			$w('#thumbnailrepeater').data = [];

			// Updating thumbail url array and repeater items
			// ----------------------------------------------
			thumbnail_local_urls.push({ "src": u_url, "_id": String(thumbnail_local_urls.length + 10) });

			// Setting repeater data
			// ---------------------
			$w('#thumbnailrepeater').onItemReady(($item, itemData, index) => {
				$item("#actthumbimage").src = itemData.src;
			});

			// Resetting thumbnail repeater
			// ----------------------------	
			$w('#thumbnailrepeater').data = thumbnail_local_urls;
			$w('#thumbnailrepeater').expand();

			// Updating upload counter
			// -----------------------
			uploadcounter = uploadcounter + 1;

			// Updating uploadfile text
			// ------------------------
			uploads_left = max_themes_upload - uploadcounter;
			$w('#uploadfiletext').text = uploads_left + " more inspiration image(s) can be uploaded for this range."
			
			// Enabling create task button!
			// ----------------------------
			if (uploadcounter >= min_themes_upload) {

				// Enable create task button
				// -------------------------
				$w('#pickstylingsbutton').enable();
			}

			// Disabling select file
			// ---------------------
			if (uploadcounter === max_themes_upload) {

				// Enable create task button
				// -------------------------
				$w('#selectfile').disable();
				$w('#uploadfiletext').text = "No more uploads possible. We are limiting to " + String(max_themes_upload) + " inspiration images per range for beta.";
			}

			

		} else {

			$w('#selectfile').disable();
			$w('#uploadfiletext').text = "No more uploads possible. We are limiting to " + String(max_themes_upload) + " inspiration images per range for beta.";
		}

	} catch (err) {

		// This means no file was selected
		// -------------------------------
		var do_nothing = "do nothing"
		console.log(' no file :)')
	}

}

// 1.2 Function to initiate ven new patterns API and exapnd pick stylings option
// -----------------------------------------------------------------------------
export async function pickstylingsbutton_click(event) {

	// 0. First upload theme images to GCS
	// -----------------------------------
	$w('#pickstylingsbutton').disable();
	$w('#selectfile').disable();
	$w('#pickstylingsbutton').label = "Working.."
	for (var i in to_be_uploaded_local_urls) {

		var u_url = to_be_uploaded_local_urls[i];
		let save_call_res = await savewiximagetogcs(main_user_id, main_task_id, String(u_url))
	
	}

	// 1. Calling ven new patterns API
	// -------------------------------
	createnewpatterns(main_user_id, main_task_id, userdevice, pmate_userid, pmate_sessionid, pmate_usertype, String(timeelapsed(pmate_sessionid)))
		.then( function(url_response) {

			if (url_response === "Thread started") {

				// new patterns api successfully started
				// -------------------------------------

				// Display settings ----------------------------------------------------

				// 0. Progress box display settings
				// --------------------------------
				$w('#newrangeprogressbox').expand();
				$w('#prog1button').enable();
				$w('#prog2button').disable();
				$w('#prog3button').disable();
				$w('#prog1linegreen').show();
				$w('#prog2linegreen').hide();
				$w('#prog1linegrey').hide();
				$w('#prog2linegrey').show();

				// 1. Upload theme box display settings
				// ------------------------------------
				$w('#uploadcreatetaskbox').collapse();
				$w('#thumbnailrepeater').collapse();
				$w('#thumbnailrepeater').data = [];
				$w('#uploadfiletext').text = "";
				$w('#pickstylingsbutton').disable();
				$w('#newpatternserrorlabel').text = "";

				// 2. Pick styling box display settings
				// ------------------------------------
				$w('#choosestylingsbox').expand();
				$w('#stylingrepeater').collapse();
				$w('#catdropdown').disable();
				$w('#uploadstylingsbutton').collapse();
				$w('#stylingscounterlabel').text = "";

				// 3. Pick patterns box display settings
				// --------------------------------------
				$w('#pickpatternsbox').collapse();
				$w('#pickedpatternscounterlabel').text = "";
				$w('#allpatternsrepeater').collapse();
				$w('#allpatternsrepeater').data = [];
				$w('#createtexturesbutton').disable();

				// 4. AI initialised box display settings
				// --------------------------------------
				$w('#aiinitialisedbox').collapse();
				$w('#aiinitialisedheader').text = "";
				$w('#aiinitialisedpara').text = "";

				// 5. Generate ideas box
				// ---------------------
				$w('#generateideasbox').collapse();
				// more to come
				
				// 6. Collapsing 
				// -------------
				$w('#loadingwaitbox').collapse();

				// END OF DISPLAY SETTINGS -----------------------------------------------


			} else {

				// new patterns api NOT started
				// ----------------------------
				$w('#pickstylingsbutton').enable();
				$w('#pickstylingsbutton').label = "Upload Now";
				$w('#newpatternserrorlabel').text = "Something went wrong. Try again in a while. Here's the error response: " + String(url_response);

			}

		});
	
}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// 2. PICK STYLINGS FUNCTIONS

// 2.1 Function that runs when departmentdropdown_change(event)
// ------------------------------------------------------------
export async function departmentdropdown_change(event, $w) {

	// LOCAL Display settings ----------------------------------------------------
	$w('#catdropdown').options = [];
	$w('#catdropdown').disable();
	$w('#stylingrepeater').collapse();
	$w('#stylingrepeater').data = [];
	$w('#stylingscounterlabel').text = "";
	$w('#stylingpagination').collapse();


	// LOCAL END OF DISPLAY SETTINGS -----------------------------------------------

	// If statements
	// -------------
	if ($w('#depdropdown').value === "GL") {
		$w('#catdropdown').options = cat_values_girls;
		
	} else if ($w('#depdropdown').value === "BY") {
		$w('#catdropdown').options = cat_values_boys;

	} else if ($w('#depdropdown').value === "WM") {
		$w('#catdropdown').options = cat_values_women;

	} else if ($w('#depdropdown').value === "MN") {
		$w('#catdropdown').options = cat_values_men;

	}

	// Calling retrievestylings function
	// ---------------------------------
	$w('#catdropdown').selectedIndex = undefined;
	$w('#catdropdown').enable();

}

// 2.2 Function on catdropdown change
// -----------------------------------
export async function catdropdown_change(event, $w) {

	// Just call get stylings API
	// -------------------------
	await retrievestylings();

	// END OF DISPLAY SETTINGS -----------------------------------------------
}

// 2.3 Function that loads stylings using styling API
// ---------------------------------------------------
export async function retrievestylings() {

	// LOCAL Display settings
	// ----------------------
	$w('#stylingrepeater').collapse();
	$w('#stylingrepeater').data = [];
	$w('#catdropdown').disable();
	$w('#depdropdown').disable();
	$w('#uploadstylingsbutton').collapse();
	$w('#stylingpagination').collapse();
	fixed_display = 16; // setting this for styling only.

	let items = [];
	var cat = $w('#catdropdown').value;

	// Disabling button for repeat calls
	// ---------------------------------
	$w('#stylingscounterlabel').text = "Loading styling blocks.."

	// Calling API to get urls JSON
	// ----------------------------
	var line_urls = await getallstylingsurl(cat);

	// Itering through the top level keys and setting items array to use
	// -----------------------------------------------------------------
	for (var key in line_urls) {

		items.push({ "name": line_urls[key]["img_name"], "src": line_urls[key]["img_url"], "header": line_urls[key]["img_header"], "description": line_urls[key]["img_desc"], "_id": key });
	}

	// Setting repeater data
	// ---------------------
	$w('#stylingrepeater').onItemReady(($item, itemData, index) => {
		$item("#stylingcheckbox").value = itemData.name;
		$item("#stylingimage").src = itemData.src;
		$item("#stylingimageheader").text = itemData.header;
		$item("#stylingimagedesc").text = itemData.description;
		
	});

	
	// Setting pagination numbers and start and end_id
	// -----------------------------------------------
	total_options = items.length;
	setpagination(total_options, $w('#stylingpagination'));
	global_styling_items = items;

	// Setting repater items based on start_ind and end_ind
	// ----------------------------------------------------
	setTimeout(()=>{$w('#loadingwaitbox').collapse();},2000);
	$w('#stylingrepeater').data = items.slice(start_ind,end_ind);
	$w('#stylingrepeater').expand();
	$w('#catdropdown').enable();
	$w('#depdropdown').enable();


	// Remembering and setting check box value from users selection
	// ------------------------------------------------------------
	$w('#stylingrepeater').forEachItem(($item, itemData, index) => {
		var curr_value = $item("#stylingcheckbox").value;
		var curr_value_index = selected_stylings_main.indexOf(curr_value);
		if (curr_value_index < 0) {
			$item("#stylingcheckbox").checked = false;
		} else {
			$item("#stylingcheckbox").checked = true;
		}
	});

	if (selected_stylings_main.length >= threshold_styling_select) {
		// Enable upload button
		// --------------------
		$w('#uploadstylingsbutton').expand();
		$w('#uploadstylingsbutton').enable();
		$w('#stylingscounterlabel').text = String(items.length) +  " styling blocks loaded. " + String(selected_stylings_main.length) + " styling block(s) selected. You can now submit your selection."

	} else {
		// Disable upload button
		// --------------------
		$w('#uploadstylingsbutton').disable();
		$w('#stylingscounterlabel').text = String(items.length) + " styling blocks loaded. " + String(selected_stylings_main.length) + " styling block(s) selected. Minimum required: " + String(threshold_styling_select) + "."
	}

}

// 2.4 Function that appends image names to main array for calling API
// -------------------------------------------------------------------
export function stylingcheckbox_change(event, $w) {

	// Seems to get current item selector
	// ----------------------------------
	let $curritem = $w.at(event.context);
	var curr_item_vale = $curritem("#stylingcheckbox").value;
	var curr_item_index = selected_stylings_main.indexOf(curr_item_vale);
	var countertext

	if ($curritem("#stylingcheckbox").checked === true) {

		if (curr_item_index < 0) {

			// Push current value to main array
			// --------------------------------
			selected_stylings_main.push(curr_item_vale);
		}
	} else {

		if (curr_item_index >= 0) {

			// Remove current value from main array
			// ------------------------------------
			selected_stylings_main.splice(curr_item_index, 1);

		}

	}

	// Enabling/disabling upload theme button
	// --------------------------------------
	if (selected_stylings_main.length >= threshold_styling_select) {

		// Enable upload button
		// --------------------
		$w('#uploadstylingsbutton').expand();
		$w('#uploadstylingsbutton').enable();
		countertext = String(selected_stylings_main.length) + " styling block(s) selected. You can now submit your selection."

	} else {
		// Disable upload button
		// --------------------
		$w('#uploadstylingsbutton').disable();
		countertext = String(selected_stylings_main.length) + " styling block(s) selected. Minimum required: " + String(threshold_styling_select) + "."
	}

	// Setting countertext label text
	// ------------------------------
	$w('#stylingscounterlabel').text = countertext
	$w('#floatingbox').show()
	$w('#floatingcounterlabel').text =  countertext

}

// 2.5 Triggers ven API for styling preparation
// --------------------------------------------- 
export async function uploadstylingsbutton_click(event) {

	// 1. Trigerring prepare patterns
	// ------------------------------
	$w('#floatingbox').hide()
	$w('#uploadstylingsbutton').disable();
	$w('#uploadstylingsbutton').label = "Working.."

	// Actual trigger
	// --------------
	prepareconfirmedstylings(main_user_id, main_task_id, getcorrectstring(selected_stylings_main),userdevice, pmate_userid, pmate_sessionid, pmate_usertype, String(timeelapsed(pmate_sessionid)))
		.then( async function(url_response) {

			if (url_response === "Thread started") {

				// Just reload the page
				// --------------------
				let baseUrl = wixLocation.baseUrl;
				await wixLocation.to(main_base_url + "/build-range?task_id=" + main_task_id);
				

			} else {

				// code
				$w('#uploadstylingsbutton').enable();
				$w('#uploadstylingsbutton').label = "Submit Selection"
				$w('#stylingscounterlabel').text = "Something went wrong. Try again in a while. Here's the error response: " + String(url_response)

			}


		});

	

}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// 3. PICK PATTERNS FUNCTIONS

// 3.1 A function that will just load the repeater with patterns
// -------------------------------------------------------------
export async function load_all_patterns(user_id, task_id) {

	// Some sanity clean ups
	// ---------------------
	$w('#pickedpatternscounterlabel').text = "Contacting Protomate for swatches..";
	$w('#allpatternsrepeater').collapse();
	$w('#allpatternsrepeater').data = [];
	$w('#createtexturesbutton').disable();
	$w('#swatchpagination').collapse();

	var items = [];

	// Calling API to get urls JSON
	// ----------------------------
	var pattern_urls = await getallpatternsurl(main_user_id, main_task_id);

	// Itering through the top level keys and setting items array to use
	// -----------------------------------------------------------------
	for (var key in pattern_urls) {
		items.push({ "src": pattern_urls[key]["p_url"], "pattern_index": pattern_urls[key]["index"], "_id": key });
	}

	// Setting repeater data
	// ---------------------
	$w('#allpatternsrepeater').onItemReady(($item, itemData, index) => {
		$item("#patternimage").src = itemData.src;
		$item("#selectpatternchkbox").value = itemData.pattern_index;

	});

	// Enabling repeater
	// -----------------
	$w('#pickedpatternscounterlabel').text = "Loading swatches..";
	$w('#loadingwaitbox').expand();

	// Setting pagination numbers and start and end_id
	// -----------------------------------------------
	total_options = items.length;
	setpagination(total_options, $w('#swatchpagination'));
	global_swatch_items = items;

	// Setting repater items based on start_ind and end_ind
	// ----------------------------------------------------
	setTimeout(()=>{$w('#loadingwaitbox').collapse();},2000);
	$w('#allpatternsrepeater').data = items.slice(start_ind,end_ind);
	$w('#allpatternsrepeater').expand();
	$w('#pickedpatternscounterlabel').text = "Showing " + String(start_ind) + " to " + String(end_ind) + " of a total " + String(items.length) + " swatches. Start selecting!";
	

}

// 3.2 Check patterns check box action on change
// ---------------------------------------------
export function selectpatternchkbox_change(event) {

	// Seems to get current item selector
	// ----------------------------------
	let $curritem = $w.at(event.context);
	var curr_item_vale = $curritem("#selectpatternchkbox").value;
	var curr_item_index = selected_patterns_main.indexOf(curr_item_vale);
	var countertext;

	if ($curritem("#selectpatternchkbox").checked === true) {

		if (curr_item_index < 0) {

			// Push current value to main array
			// --------------------------------
			selected_patterns_main.push(curr_item_vale);
		}
	} else {

		if (curr_item_index >= 0) {

			// Remove current value from main array
			// ------------------------------------
			selected_patterns_main.splice(curr_item_index, 1);

		}

	}

	// Enabling/disabling upload theme button
	// --------------------------------------
	if (selected_patterns_main.length >= threshold_pattern_select) {

		// Enable create texture button
		// ----------------------------
		$w('#createtexturesbutton').enable();
		countertext = String(selected_patterns_main.length) + " swatch(es) selected. You can now submit your selection."

	} else {
		// Disable upload button
		// --------------------
		$w('#createtexturesbutton').disable();
		countertext = String(selected_patterns_main.length) + " swatch(es) selected. Minimum required: " + String(threshold_pattern_select) + "."
	}

	// Setting countertext label text
	// ------------------------------
	$w('#pickedpatternscounterlabel').text = countertext;
	$w('#floatingbox').show();
	$w('#floatingcounterlabel').text =  countertext;


}

// 3.3 Main function that submits pattern selection
// ------------------------------------------------
export async function createtexturesbutton_click(event) {

	// 1. Trigerring create textures API
	// ---------------------------------
	$w('#createtexturesbutton').disable();
	$w('#createtexturesbutton').label = "Working.."
	
	// Actual trigger
	// --------------
	createtexturesforselection(main_user_id, main_task_id, getcorrectstring(selected_patterns_main), userdevice, pmate_userid, pmate_sessionid, pmate_usertype, String(timeelapsed(pmate_sessionid)))
		.then(function(url_response) {
			if (url_response === "Thread started") {
				// Just reload the page
				// --------------------
				let baseUrl = wixLocation.baseUrl;
				wixLocation.to(main_base_url + "/build-range?task_id=" + main_task_id);
			}
			else {
				// code
				$w('#createtexturesbutton').enable();
				$w('#createtexturesbutton').label = "Submit Selection"
				$w('#pickedpatternscounterlabel').text = "Something went wrong. Try again in a while. Here's the error response: " + String(url_response)
			}
		});


}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// 4. RANGE BOARD FUNCTIONS

// 4.1 Checking validity of rangeboard name input
// -----------------------------------------------
export function rangeboardname_keyPress(event) {
	
	// Setting pdf to disable
	// ----------------------
	$w("#downloadrangepdf").disable();
	$w("#downloadrangepdf").label = "Download PDF";

	// Checking validity
	// -----------------
	if ($w('#rangeboardname').value !== "" && $w('#rangeboardstylingprefix').value !== "") {

		$w('#generateideasbutton').enable()
	} else {

		$w('#generateideasbutton').disable()
	}
}

// 4.2 Checking validity of rangeboard styling prefix input
// --------------------------------------------------------
export function rangeboardstylingprefix_keyPress(event) {
	
	// Setting pdf to disable
	// ----------------------
	$w("#downloadrangepdf").disable();
	$w("#downloadrangepdf").label = "Download PDF";

	// Checking validity
	// -----------------
	if ($w('#rangeboardname').value !== "" && $w('#rangeboardstylingprefix').value !== "") {

		$w('#generateideasbutton').enable()
	} else {

		$w('#generateideasbutton').disable()
	}
}

// 4.3 Generate Range even
// -----------------------
export async function generateideasbutton_click(event) {

	// Calling generate ideas API
	// --------------------------
	// 1. Trigerring create textures API
	// ---------------------------------
	$w("#generateideasinfo").text = "";
	$w("#generateideasinfo").hide();
	$w('#generateideasbutton').disable();
	$w('#generateideasbutton').label = "Working.."
	$w('#rangeboardname').disable();
	$w('#rangeboardstylingprefix').disable();

	// Setting MAIN TASK ID here
	// -------------------------
	var t_date = new Date();
	var t_time = t_date.getTime();
	main_gen_id = "GEN" + String(t_time);

	var range_name = $w("#rangeboardname").value;
	var styling_prefix = $w("#rangeboardstylingprefix").value;
	var no_options = 5;

	//let url_reponse = await 
	generateideasforuser(main_user_id, main_task_id, main_gen_id, range_name, styling_prefix, no_options, userdevice, pmate_userid, pmate_sessionid, pmate_usertype, String(timeelapsed(pmate_sessionid)))
		.then( function(url_response) {
			if (url_response === "Thread started") {
				// Refresh items in box
				// ---------------------
				$w("#generateideasinfo").show();
				$w("#generateideasinfo").text = "Done! Please wait while we fetch your range board."
				$w('#generateideasbutton').label = "Create New Range Board";
				//$w('#generateideasbutton').enable();
				

				// Polling for PDF check
				// ----------------------
				// Setting Download PDF Button
				// ----------------------------
				$w("#downloadrangepdf").disable();
				$w("#downloadrangepdf").label = "Fetching your range board..";
				gentimerid = setInterval(checkrangeavailable, 2000);
			}
			else {
				// Refresh items in box
				// ---------------------
				$w("#generateideasinfo").show();
				$w("#generateideasinfo").text = "Something went wrong. Try again in a while. Here's the error response: " + String(url_response)
			}
		});

	
}

// 4.5 A function that will check for rangeboard pdf
// -------------------------------------------------
export async function checkrangeavailable() {

	var pdf_url = await getrangepdfurl(main_user_id, main_task_id, main_gen_id);

	if (String(pdf_url) === "Invalid URL") {
		// Do nothing
	}
	else{

		$w("#downloadrangepdf").label = "Download PDF";
		$w("#downloadrangepdf").link =  String(pdf_url);
		$w("#downloadrangepdf").enable();
		clearInterval(gentimerid);
		$w('#generateideasbutton').label = "Create Rangeboard"
		

		setTimeout(()=>{

			// Enabling other feilds after 10 secs
			// -----------------------------------
			$w('#generateideasbutton').enable();
			$w('#rangeboardname').enable();
			$w('#rangeboardstylingprefix').enable();
			$w("#generateideasinfo").hide();

		}, 10000)
		
	
	}


}


// 4.6 A polling function that sets the link for pdf once its got
// --------------------------------------------------------------


// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
// 5. AI INITIALISED FUNCTIONS

// 5.1 Function that sets progress status updates
// ----------------------------------------------
export async function getprogressupdate(user_id, task_id){

	// Initialisations
	// ---------------
	var items = [];
	//$w('#progressstatusrepeater').data = [];

	// 1. First is to get get task status for the task and then get progress and add repeater items
	// ---------------------------------------------------------------------------------------------
	var currtask = await gettaskstatus(user_id, task_id);
	
	// 1. Master check to see if any process is underway
	// -------------------------------------------------
	if (currtask["new_patterns"] ===  1 || currtask["prepare_stylings"] === 1 || currtask["create_textures"] === 1) {

		// 1. Checking if newpatterns build underway
		// -----------------------------------------
		if (currtask["new_patterns"] === 1) {

			var curr_progress_np = await getprogress(task_id, 1);
			var curr_time_left_np;

			if (String(curr_progress_np["runnning_status"]).toLowerCase().includes("error")) {
				
				// There is an error
				// -----------------
				curr_time_left_np = "Not available";
				items.push({
					"_id":task_id + "1",
					"progress_for": "Processing Uploaded Inspirations",
					"curr_step": "None",
					"total_step": curr_progress_np["total_step"] + 1,
					"curr_message": "Sorry but an error has occured. Please start again from the beginning.",
					"curr_time_left": curr_time_left_np
				})

			} else {

				// No error
				// -------
				if (curr_progress_np["curr_process_time_remaining"] === "ETA Not Available") {

					curr_time_left_np = "Working.. please wait";

				} else {
					
					curr_time_left_np = curr_progress_np["curr_process_time_remaining"];

				}

				// Need to check runnning_status
				items.push({
					"_id":task_id + "1",
					"progress_for": "Processing Uploaded Inspirations",
					"curr_step": curr_progress_np["curr_step"] + 1,
					"total_step": curr_progress_np["total_step"] + 1,
					"curr_message":curr_progress_np["curr_message"],
					"curr_time_left": curr_time_left_np
				})
			}
			
		}
		// 2. Checking if styling preparations underway
		// --------------------------------------------
		if (currtask["prepare_stylings"] === 1) {

			var curr_progress_ps = await getprogress(task_id, 2);
			var curr_time_left_ps;

			if (String(curr_progress_ps["runnning_status"]).toLowerCase().includes("error")) {

				// There is an error
				// -----------------
				curr_time_left_ps = "Not available"
				items.push({
				"_id":task_id + "2",
				"progress_for": "Processing Selected Styling Blocks",
				"curr_step": "None",
				"total_step": curr_progress_ps["total_step"] + 1,
				"curr_message": "Sorry but an error has occured. Please start again from the beginning.",
				"curr_time_left": curr_time_left_ps
				})
				
				

			} else {

				if (curr_progress_ps["curr_process_time_remaining"] === "ETA Not Available") {

					curr_time_left_ps = "Working.. please wait";

				} else {
					
					curr_time_left_ps = curr_progress_ps["curr_process_time_remaining"];

				}
				items.push({
					"_id":task_id + "2",
					"progress_for": "Processing Selected Styling Blocks",
					"curr_step": curr_progress_ps["curr_step"] + 1,
					"total_step": curr_progress_ps["total_step"] + 1,
					"curr_message":curr_progress_ps["curr_message"],
					"curr_time_left": curr_time_left_ps
				})


			}
			
		}
		// 3. Checking if create textures underway
		// ---------------------------------------
		if (currtask["create_textures"] === 1) {

			var curr_progress_ct = await getprogress(task_id, 3);
			var curr_time_left_ct;

			if (String(curr_progress_ct["runnning_status"]).toLowerCase().includes("error")) {

				// Error
				curr_time_left_ct = "Not available."
				items.push({
					"_id":task_id + "3",
					"progress_for": "Processing Selected Swatches",
					"curr_step": "None",
					"total_step": curr_progress_ct["total_step"] + 1,
					"curr_message":"Sorry but an error has occured. Please start again from the beginning.",
					"curr_time_left": curr_time_left_ct
				})

			} else {

				if (curr_progress_ct["curr_process_time_remaining"] === "ETA Not Available") {

					curr_time_left_ct = "Working.. please wait";

				} else {
					
					curr_time_left_ct = curr_progress_ct["curr_process_time_remaining"];

				}
				items.push({
					"_id":task_id + "3",
					"progress_for": "Processing Selected Swatches",
					"curr_step": curr_progress_ct["curr_step"] + 1,
					"total_step": curr_progress_ct["total_step"] + 1,
					"curr_message":curr_progress_ct["curr_message"],
					"curr_time_left": curr_time_left_ct
				})


			}

			
		}

		// Setting repeater data
		// ---------------------
		$w('#progressstatusrepeater').onItemReady(($item, itemData, index) => {
			$item("#progressstatusheader").text = itemData.progress_for;
			$item("#progresscurrmessagetext").text = itemData.curr_message;
			$item("#progressstatussummary").text = itemData.curr_step + " out of " + itemData.total_step + " steps complete"
			$item("#timertext").text = itemData.curr_time_left;
		});

		$w('#progressstatusrepeater').data = items;
		$w('#progressstatusrepeater').expand();


	} else {

		// code to collapes progressbox
		// ----------------------------
		clearInterval(progresstimerid);
		$w('#progressstatusrepeater').collapse();
		// Using a redirect so that task_id gets embedded in the URL
		// ---------------------------------------------------------
		let baseUrl = wixLocation.baseUrl;
		await wixLocation.to(main_base_url + "/build-range?task_id=" + main_task_id);
		

	}
	

}

