// For full API documentation, including code examples, visit http://wix.to/94BuAAs

// imports
// -------
import { geteverythingfortaskpage, getallrangeboardsurl } from 'backend/aModule';
import { main_base_url } from 'public/public_initials.js';
import wixUsers from 'wix-users';
import wixLocation from 'wix-location';
import wixWindow from 'wix-window';

var main_user_id;
var user_task_ids = [];

// Page specific initialisations
// -----------------------------
var themesurl = [];
var rangesurls = [];
var taskmessages = [];
var taskfilesurl = [];

$w.onReady(function () {

	// Some initialisations
	// --------------------
	$w('#loadingwaitbox').expand();

	// 1. Get the userid -- this page is always visible only after a user is logged in
	// -------------------------------------------------------------------------------
	wixUsers.currentUser.getEmail()
		.then(function (user) {

			// 1.1. Setting main user id
			// -----------------------
			main_user_id = user;
			settaskrepeateritemssingeshot(main_user_id);

		});

});

// 0 Returning readable time function
// ----------------------------------
export function readabletime_taskid(task_id) {

	// 1. Getting timestamp and Converting to integer
	// ---------------------------------------------
	var timestamp = parseInt(task_id.replace("PMTASK",""), 10);
	
	// 2. Convertion
	// -------------
	var timeindate = new Date(timestamp);
	var readable = timeindate.toLocaleString();
	return readable

}


// 1. Function to set repeater items
// -----------------------------------
export async function settaskrepeateritemssingeshot(){

	// Some initialisations
	// --------------------
	$w('#listtasksrepeater').collapse();
	$w('#listtasksrepeater').data = [];
	var items = [];

	var url_reponse = await geteverythingfortaskpage(main_user_id);

	if (url_reponse === "NO TASKS FOUND"){

		// No tasks for the user found
		// --------------------------
		$w('#loadingwaitbox').collapse();
		$w('#mytasktextheaderbox').collapse();
		$w('#notaskbox').expand();

	} else {

		// Some sorting ops
		// ----------------
		var sort_keys = [];
		for (var sort_k in url_reponse) {

			sort_keys.push(sort_k);

		}
		sort_keys.sort().reverse();

		// Tasks were found and we need to set repeater items
		// --------------------------------------------------
		for (var keys in sort_keys){
			
			// 1. Getting its taskmessage
			// --------------------------
			var taskmessage = returnmasterstatus(url_reponse[sort_keys[keys]]["task_status_new_patterns"], url_reponse[sort_keys[keys]]["task_status_prepare_stylings"], url_reponse[sort_keys[keys]]["task_status_create_textures"]);

			items.push({
			"task_id": sort_keys[keys],
			"mast_message": taskmessage[0]["master_status"],
			"_id": sort_keys[keys],
			"themes_urls": url_reponse[sort_keys[keys]]["themes_url"],
			"new_pats": taskmessage[0]["new_pats"],
			"prep_stylings": taskmessage[0]["prep_styling"],
			"create_textures": taskmessage[0]["create_textures"],
			"range_urls": url_reponse[sort_keys[keys]]["ranges_url"],
			"button_label": taskmessage[0]["button_label"],
			"button_color": taskmessage[0]["button_color"],
			"taskfile_url": url_reponse[sort_keys[keys]]["taskfiles_url"],
			"created_on": readabletime_taskid(sort_keys[keys]),
		});


		// 3. We now have items with data that needs to be pushed to repeater
		// ------------------------------------------------------------------
		$w('#listtasksrepeater').onItemReady(($item, itemData, index) => {
			// Setting theme preview images
			// -----------------------------
			$item("#image1").src = itemData.themes_urls[1];
			$item("#image2").src = itemData.themes_urls[2];
			$item("#image3").src = itemData.themes_urls[3];
			$item("#image4").src = itemData.themes_urls[4];

			// Setting other content
			// ---------------------
			$item("#masterstatuslabel").text = itemData.mast_message;
			$item("#ttaskidlabel").text = itemData.task_id + ", Created on " + itemData.created_on;
			$item("#taskidonlylabel").text = itemData.task_id;
			$item("#themeslabel").text = itemData.new_pats;
			$item("#stylingslabel").text = itemData.prep_stylings;
			$item("#swatchedlabel").text = itemData.create_textures;
			$item("#gototaskbutton").label = itemData.button_label;
			$item("#gototaskbutton").style.backgroundColor = itemData.button_color;
		
			// Button details
			// --------------
			$item("#gototaskbutton").link = main_base_url + "/build-range?task_id=" + itemData.task_id;

			// Taskfile button
			// ---------------
			if (itemData.taskfile_url === "Invalid URL"){
				$item("#downloadtaskfiles").disable();
			} else {
				$item("#downloadtaskfiles").link = itemData.taskfile_url;
				$item("#downloadtaskfiles").enable();

			}

			// Range URLS button enabling / disabling
			// --------------------------------------
			if (itemData.range_urls === "NO RANGES FOUND"){
				$item("#showrangeboards").disable();
			} else {
				$item("#showrangeboards").enable();

			}

		});

		// 3. Enabling repeater
		// -------------------
		$w('#loadingwaitbox').collapse();
		$w('#mytasktextheaderbox').expand();
		$w('#listtasksrepeater').data = items;
		$w('#listtasksrepeater').expand();



		}
	}



}


// 2. Function to return final message for master status
// -----------------------------------------------------
export function returnmasterstatus(new_pats, prep_styling, create_textures) {

	var output = [];
	var pending = "Pending";
	var inprog = "Processing..";
	var doneok = "Done";
	var mstatus;
	var red_color = "#FF4040";
	var green_color = "#41BAAE";

	// Conditions
	// ----------
	if (new_pats === 0 && prep_styling === 0 && create_textures === 0) {

		// Invalid userid / task id
		// ------------------------
		$w('#notaskbox').expand();

		return "INVALID"

	} else if (new_pats === 1 && prep_styling === 0 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "Please select stylings to continue";
		output.push({ "new_pats": inprog, "prep_styling": pending, "create_textures": pending, "master_status": mstatus, "button_label": "Continue", "button_color": red_color });
		//output.push({ inprog,pending_s,pending_s,mstatus })
		return output;

	} else if (new_pats === 1 && prep_styling === 1 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "AI initialised. You can pick swatches soon.";
		output.push({ "new_pats": inprog, "prep_styling": inprog, "create_textures": pending, "master_status": mstatus, "button_label": "View Task", "button_color": red_color });
		return output;

	} else if (new_pats === 1 && prep_styling === 2 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "AI initialised. You can pick swatches soon.";
		output.push({ "new_pats": inprog, "prep_styling": doneok, "create_textures": pending, "master_status": mstatus, "button_label": "View Task", "button_color": red_color })
		return output;

	} else if (new_pats === 2 && prep_styling === 0 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "Please select stylings to continue";
		output.push({ "new_pats": doneok, "prep_styling": pending, "create_textures": pending, "master_status": mstatus, "button_label": "Continue", "button_color": red_color })
		return output;

	} else if (new_pats === 2 && prep_styling === 1 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "You can pick swatches now";
		output.push({ "new_pats": doneok, "prep_styling": inprog, "create_textures": pending, "master_status": mstatus, "button_label": "Continue", "button_color": red_color })
		return output;

	} else if (new_pats === 2 && prep_styling === 2 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "You can pick swatches now";
		output.push({ "new_pats": doneok, "prep_styling": doneok, "create_textures": pending, "master_status": mstatus, "button_label": "Continue", "button_color": red_color })
		return output;

	} else if (new_pats === 2 && prep_styling === 1 && create_textures === 1) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "AI Initialised. You can generate ranges soon";
		output.push({ "new_pats": doneok, "prep_styling": inprog, "create_textures": inprog, "master_status": mstatus, "button_label": "View Task", "button_color": red_color })
		return output;

	} else if (new_pats === 2 && prep_styling === 2 && create_textures === 2) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "Good to go";
		output.push({ "new_pats": doneok, "prep_styling": doneok, "create_textures": doneok, "master_status": mstatus, "button_label": "Create New Rangeboard", "button_color": green_color })
		return output;

	}

}

// 3. Function to redirect user to new range
// ------------------------------------------
export async function createnewranges_click(event) {
	//Add your code for this event here: 

	// Using a redirect so that task_id gets embedded in the URL
	// ---------------------------------------------------------
	let baseUrl = wixLocation.baseUrl;
	await wixLocation.to(main_base_url + "/build-range?task_id=NEW");
}


// 4. Function to show lightbox with rangeboards
// ---------------------------------------------
export async function showrangeboards_click(event) {

	var lightboxitems = [];

	// 1. Getting taskid
	// -------------------
	let $curritem = $w.at(event.context);
	var curr_task_id = $curritem("#taskidonlylabel").text;

	// 2. Getting range URLS and setting array to pass to lightbox
	// ------------------------------------------------------------
	var curr_rangeurls = await getallrangeboardsurl(main_user_id, curr_task_id);

	// 3. Iteratiing and setting items to pass for light box repeater data
	// -------------------------------------------------------------------
	for (var i in curr_rangeurls) {
		lightboxitems.push({"_id" : String(i), "rangeurl":curr_rangeurls[i]});
	}

	// 4 .Triggering lightbox
	// ----------------------
	wixWindow.openLightbox("rangeboardurlspopup", lightboxitems);
	//setTimeout(wixWindow.openLightbox("rangeboardurlspopup", lightboxitems), 3000);

	
	
}
