// For full API documentation, including code examples, visit http://wix.to/94BuAAs

// imports
// -------
import { gettaskids, getthemesurl, gettaskstatus, getallrangeboardsurl } from 'backend/aModule';
import { main_base_url } from 'public/public_initials.js';
import wixUsers from 'wix-users';
import wixLocation from 'wix-location';
var main_user_id;
var user_task_ids = [];

$w.onReady(function () {

	// Some initialisations
	// --------------------
	$w('#loadingwaitbox').expand();

	// 1. Get the userid -- this page is always visible only after a user is logged in
	// -------------------------------------------------------------------------------
	wixUsers.currentUser.getEmail()
		.then(function (user) {

			// 1.1. Setting main user id
			// -----------------------
			main_user_id = user;
			//main_user_id = "sharanya@geospot.in";

			// 1.2. Getting task ids associated with user
			// -----------------------------------------
			gettaskids(main_user_id)
				.then(function (task_ids) {

					// 1.2.1 Set user task ids array to incoming arrays
					// ------------------------------------------------
					for (var keys in task_ids) {

						user_task_ids.push(task_ids[keys])

					}

					// 1.2.2 We have the task_ids here - call function to set repeater items
					// ---------------------------------------------------------------------
					if (user_task_ids.length > 0) {

						// Setting repeaters
						// -----------------
						settaskrepeateritems(user_task_ids);

					} else {

						// Showing create new task box
						// ---------------------------
						// Invalid userid / task id
						// ------------------------
						$w('#loadingwaitbox').collapse();
						$w('#mytasktextheaderbox').collapse();
						$w('#notaskbox').expand();

					}

				});

		});

});

// 1. Function to set repeater items
// ---------------------------------
export async function settaskrepeateritems(task_ids) {

	// Some initialisations
	// --------------------
	$w('#listtasksrepeater').collapse();
	$w('#listtasksrepeater').data = [];
	var items = [];
	var rangitems = [];

	var themesurl = [];
	var rangesurls = [];
	var taskmessages = [];

	// 1. iterate for each task id and set themes and other content
	// -----------------------------------------------------------
	for (var i in task_ids) {

		// 1.1 Fullfill themesurl arrays
		// -----------------------------
		var curr_themesurls = await getthemesurl(main_user_id, task_ids[i]);
		themesurl.push(curr_themesurls);

		// 1.2 Fullfill themesurl arrays
		// -----------------------------
		var currtask = await gettaskstatus(main_user_id, task_ids[i]);
		taskmessages[i] = returnmasterstatus(currtask["new_patterns"], currtask["prepare_stylings"], currtask["create_textures"]);

		// 1.3 Getting all rangeboards URL associated with every task as well
		// ------------------------------------------------------------------
		var curr_rangeurls = await getallrangeboardsurl(main_user_id, task_ids[i]);
		rangesurls.push(curr_rangeurls)

		// 
		//console.log("At Task: " + task_ids[i])
		//console.log("themes: ")
		//console.log(themesurl[i])
		//console.log("messages: ")
		//console.log(taskmessages[i])

	}

	//console.log("PRINTING ALL -- At Task: " + task_ids[i])
	//console.log("themes: ")
	//console.log(themesurl)
	//console.log("messages: ")
	//console.log(taskmessages)

	// 2. Pushing items seperately
	// ---------------------------
	for (i in task_ids) {

		// 3. Pushing new array to items
		// -----------------------------
		items.push({
			"task_id": task_ids[i],
			"mast_message": taskmessages[i][0]["master_status"],
			"_id": task_ids[i],
			"themes_urls": themesurl[i],
			"new_pats": taskmessages[i][0]["new_pats"],
			"prep_stylings": taskmessages[i][0]["prep_styling"],
			"create_textures": taskmessages[i][0]["create_textures"],
			"range_urls": rangesurls[i],
			"button_label": taskmessages[i][0]["button_label"],
			"button_color": taskmessages[i][0]["button_color"],
		});

	}

	// 3. We now have items with data that needs to be pushed to repeater
	// ------------------------------------------------------------------
	$w('#listtasksrepeater').onItemReady(($item, itemData, index) => {
		// Setting theme preview images
		// -----------------------------
		$item("#image1").src = itemData.themes_urls[1];
		$item("#image2").src = itemData.themes_urls[2];
		$item("#image3").src = itemData.themes_urls[3];
		$item("#image4").src = itemData.themes_urls[4];

		// Setting other content
		// ---------------------
		$item("#masterstatuslabel").text = itemData.mast_message;
		$item("#ttaskidlabel").text = itemData.task_id;
		$item("#themeslabel").text = itemData.new_pats;
		$item("#stylingslabel").text = itemData.prep_stylings;
		$item("#swatchedlabel").text = itemData.create_textures;
		$item("#gototaskbutton").label = itemData.button_label;
		$item("#gototaskbutton").style.backgroundColor = itemData.button_color;

		// Button details
		// --------------
		$item("#gototaskbutton").link = main_base_url + "/apitest/build-range?task_id=" + itemData.task_id;

	});

	// 3. Enabling repeater
	// -------------------
	$w('#loadingwaitbox').collapse();
	$w('#mytasktextheaderbox').expand();
	$w('#listtasksrepeater').data = items;
	$w('#listtasksrepeater').expand();

}

// 2. Function to return final message for master status
// -----------------------------------------------------
export function returnmasterstatus(new_pats, prep_styling, create_textures) {

	var output = [];
	var pending = "Pending";
	var inprog = "Processing..";
	var doneok = "Done";
	var mstatus;
	var red_color = "#FF4040";
	var green_color = "#41BAAE";

	// Conditions
	// ----------
	if (new_pats === 0 && prep_styling === 0 && create_textures === 0) {

		// Invalid userid / task id
		// ------------------------
		$w('#notaskbox').expand();

		return "INVALID"

	} else if (new_pats === 1 && prep_styling === 0 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "Please select stylings to continue";
		output.push({ "new_pats": inprog, "prep_styling": pending, "create_textures": pending, "master_status": mstatus, "button_label": "Continue", "button_color": red_color });
		//output.push({ inprog,pending_s,pending_s,mstatus })
		return output;

	} else if (new_pats === 1 && prep_styling === 1 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "AI initialised. You can pick swatches soon.";
		output.push({ "new_pats": inprog, "prep_styling": inprog, "create_textures": pending, "master_status": mstatus, "button_label": "View Task", "button_color": red_color });
		return output;

	} else if (new_pats === 1 && prep_styling === 2 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "AI initialised. You can pick swatches soon.";
		output.push({ "new_pats": inprog, "prep_styling": doneok, "create_textures": pending, "master_status": mstatus, "button_label": "View Task", "button_color": red_color })
		return output;

	} else if (new_pats === 2 && prep_styling === 0 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "Please select stylings to continue";
		output.push({ "new_pats": doneok, "prep_styling": pending, "create_textures": pending, "master_status": mstatus, "button_label": "Continue", "button_color": red_color })
		return output;

	} else if (new_pats === 2 && prep_styling === 1 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "You can pick swatches now";
		output.push({ "new_pats": doneok, "prep_styling": inprog, "create_textures": pending, "master_status": mstatus, "button_label": "Continue", "button_color": red_color })
		return output;

	} else if (new_pats === 2 && prep_styling === 2 && create_textures === 0) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "You can pick swatches now";
		output.push({ "new_pats": doneok, "prep_styling": doneok, "create_textures": pending, "master_status": mstatus, "button_label": "Continue", "button_color": red_color })
		return output;

	} else if (new_pats === 2 && prep_styling === 1 && create_textures === 1) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "AI Initialised. You can generate ranges soon";
		output.push({ "new_pats": doneok, "prep_styling": inprog, "create_textures": inprog, "master_status": mstatus, "button_label": "View Task", "button_color": red_color })
		return output;

	} else if (new_pats === 2 && prep_styling === 2 && create_textures === 2) {

		// Themes uploaded and learning but stylings not chosen
		// ----------------------------------------------------
		mstatus = "Ready for generation"
		output.push({ "new_pats": doneok, "prep_styling": doneok, "create_textures": doneok, "master_status": mstatus, "button_label": "Generate Range", "button_color": green_color })
		return output;

	}

}

// 3. Function to redirect user to new range
// ------------------------------------------
export async function createnewranges_click(event) {
	//Add your code for this event here: 

	// Using a redirect so that task_id gets embedded in the URL
	// ---------------------------------------------------------
	let baseUrl = wixLocation.baseUrl;
	await wixLocation.to(main_base_url + "/apitest/build-range?task_id=NEW");
}
